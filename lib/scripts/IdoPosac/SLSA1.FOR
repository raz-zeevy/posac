
CY$STORAGE:2
      PROGRAM LSA1
C**************************************************************
C
C  LSA1 : ITEM MAPPING BY SCALOGRAM BOUNDARY SCALES
C
C**************************************************************
C
C  THIS PROGRAM IS RUN AFTER PROGRAM 'POSAC' WITHOUT ANY
C  ADDITIONAL DIRECTIVES . IT WORKS ON RESULTS WRITTEN
C  BY 'POSAC' ON UNIT 'NSCR'
C
C**************************************************************
C      COMMON X(6500)

      IMPLICIT INTEGER*2  (I-N)
INCLUDE 'MPARMLIN'
      INTEGER*2 MNINT
      PARAMETER (MNINT = 800)
      INTEGER*2 X1 (INTMAX), XN1 (INTMAX), XN2 (INTMAX), XN3 (INTMAX),
     $        XN4 (INTMAX), XN5 (INTMAX), XN6 (INTMAX)
      REAL Y1 (INTMAX), YN5 (INTMAX, 2),
     $     XN7 (INTMAX, MNINT), XN8 (INTMAX, MNINT)
      EQUIVALENCE (XN5 (1), YN5 (1, 1))
      EQUIVALENCE (XN6 (1), YN5 (1, 2))
      EQUIVALENCE (Y1, X1)
C
      COMMON/IO/NWRITE,NSCR
      COMMON/LAB/LABEL (26)
      CHARACTER*40 LABEL
      COMMON/SCHARS/UP,BOTTM,LEFT,RIGHT,
     $               UPLEFT,UPRIGHT,BOTTMLEFT,BOTTMRIGHT,FORMFEED
      CHARACTER*1 UP,BOTTM,LEFT,RIGHT,
     $             UPLEFT,UPRIGHT,BOTTMLEFT,BOTTMRIGHT,FORMFEED
C
      CALL OPENFILE
      READ (NSCR) UP,BOTTM,LEFT,RIGHT,UPLEFT,UPRIGHT,
     $            BOTTMLEFT,BOTTMRIGHT,FORMFEED
      READ(NSCR) NV,NP,ISC1,ISCN
      READ(NSCR) (LABEL (I), I=1,NV)
      WRITE(NWRITE,1000) FORMFEED
      NINT=ISC1-ISCN
      IF (NINT .GT. MNINT) THEN
          WRITE (*,*) ' *** ERROR *** Scores too high.'
          STOP 2
      END IF
C      N1=NV+1
C      N2=N1+NV
C      N3=N2+NV
C      N4=N3+NV
C      N5=N4+NV
C      N6=N5+NV
C      N7=N6+NV
C      N8=N7+NV*NINT
C      N9=N8+NV*NINT
C      MEMORY=NV*(7+2*NINT)
      CALL BOUNDR (X1, XN1, XN2, XN3, XN4, XN5, XN6, XN7, XN8,
     $             NV, NP, NINT)
C  THE FOLLOWING PRINT WAS SUPPRESSED BECAUSE
C  SOMETIMES IT IS VERY BIG
C     CALL PRNT(X(N7),X(N8),NV,NINT)
      CALL CORVAR (XN7, XN8, YN5, NV, NINT)
      CALL SPLSA1 (YN5, XN3, NV)
      CALL PLSA1 (YN5, XN3, NV)
C
C  ADDED , OCTOBER 1982 -------------
      CALL COSIST (YN5, Y1, NV, NINT)
C  -----------------------------------
      STOP 'LSA1 Completed'
 1000 FORMAT(A1,/,47X,38(1H*),/,47X,1H*,7X,
     $22HLATTICE SPACE ANALYSIS,7X,1H*,/,47X,
     $38H*LSA1 BASED ON POSAC1 BOUNDARY SCALES*,
     $/,47X,38(1H*),///)
      END
      SUBROUTINE BOUNDR(IPRMN1,IPRMX1,IPRMN2,IPRMX2,IPRNXT
     $,IPFN,IPFX,PRFMN,PRFMX,NV,NP,NINT)

      IMPLICIT INTEGER*2  (I-N)
C
C  FINDING THE TWO BOUNDARY PATHS FROM THE HIGHER
C  PROFILE TO THE LOWER ONE , IN THE DROP FROM
C  LEVEL TO LEVEL . A WEIGHT IS AFFECTED FOR EACH VARIABLE
C
      COMMON/IO/NWRITE,NSCR
      DIMENSION IPRMN1(*),IPRMX1(*),IPRMN2(*),IPRMX2(*)
     $,IPRNXT(*),IPFN(*),IPFX(*), PRFMN(NV,NINT), PRFMX(NV,NINT)
      ITEST=0
      NNPP=0
      READ(NSCR) (IPRMN1(K),K=1,NV)
      NNPP=NNPP+1
      DO 10 K=1,NV
         IPRMX1(K)=IPRMN1(K)
   10 CONTINUE
      I=1
      READ(NSCR) (IPRMN2(K),K=1,NV),ISCO2,IFREQ,X,Y,DUMMY,VALMIN
      NNPP=NNPP+1
      DO 20 K=1,NV
         IPRMX2(K)=IPRMN2(K)
   20 CONTINUE
      VALMAX=VALMIN
   30 CONTINUE
      IF(NNPP .EQ. NP) GOTO 200
      READ(NSCR) (IPRNXT(K),K=1,NV),ISNXT,IFREQ,X,Y,DUMMY,XHNXT
      NNPP=NNPP+1
      IF(ISCO2.EQ.ISNXT) GO TO 40
  300 CONTINUE
      DO 50 K=1,NV
         IPFN(K)=IPRMN1(K)-IPRMN2(K)
         IPFX(K)=IPRMX1(K)-IPRMX2(K)
         PRFMN(K,I)=IPFN(K)
         PRFMX(K,I)=IPFX(K)
   50 CONTINUE
      ND=0
      DO 60 K=1,NV
         ND=ND+IPFN(K)
   60 CONTINUE
      IF(ND.EQ.1) GO TO 70
      ND1=ND+I-1
      XND=ND
      DO 80 J=I,ND1
         DO 85 K=1,NV
            PRFMN(K,J)=IPFN(K)/XND
            PRFMX(K,J)=IPFX(K)/XND
   85    CONTINUE
   80 CONTINUE
      I=ND1
   70 CONTINUE
      DO 90 K=1,NV
         IPRMN1(K)=IPRMN2(K)
         IPRMX1(K)=IPRMX2(K)
         IPRMN2(K)=IPRNXT(K)
         IPRMX2(K)=IPRNXT(K)
   90 CONTINUE
      ISCO2=ISNXT
      VALMIN=XHNXT
      VALMAX=XHNXT
      IF(ITEST.EQ.1) RETURN
      I=I+1
      GO TO 30
   40 CONTINUE
      VALMIN=AMIN1(VALMIN,XHNXT)
      IF(VALMIN.NE.XHNXT) GO TO 100
      DO 110 K=1,NV
         IPRMN2(K)=IPRNXT(K)
  110 CONTINUE
  100 CONTINUE
      VALMAX=AMAX1(VALMAX,XHNXT)
      IF(VALMAX.NE.XHNXT) GO TO 30
      DO 120 K=1,NV
         IPRMX2(K)=IPRNXT(K)
  120 CONTINUE
      GO TO 30
  200 ITEST=1
      GO TO 300
      END
C
C      SUBROUTINE PRNT(PRFMN,PRFMX,NV,NINT)
C      COMMON/IO/NWRITE,NSCR
C      DIMENSION PRFMN (NV,*), PRFMX (NV,*)
C      ZERO=1.E-20
C      STEP=100./NINT
C      DO 10 K=1,NV
C         WRITE(NWRITE,100) K
C         WRITE(NWRITE,200)
C         DO 20 I=1,NINT
C            WX=PRFMN(K,I)
C            IF(ABS(WX).LT.ZERO) GO TO 20
C            X=STEP*I
C            DO 30 J=1,NINT
C               WY=PRFMX(K,J)
C               IF(ABS(WY).LT.ZERO) GO TO 30
C               Y=STEP*J
C               WRITE(NWRITE,300) X,Y,WX,WY
C   30       CONTINUE
C   20    CONTINUE
C   10 CONTINUE
C      RETURN
C  100 FORMAT(///,28X,19HDISPERSION OF ITEM ,I2)
C  200 FORMAT(/,13X,1HX,12X,1HY,20X,8HX-WEIGHT,5X,8HY-WEIGHT,
C     $/,13X,1H-,12X,1H-,20X,8(1H-),5X,8(1H-))
C  300 FORMAT(8X,F6.2,7X,F6.2,22X,F6.2,7X,F6.2)
C      END
C
      SUBROUTINE CORVAR (PRFMN, PRFMX, SOL, NV, NINT)
      IMPLICIT INTEGER*2  (I-N)

      COMMON/IO/NWRITE,NSCR
      COMMON/LAB/LABEL (26)
      CHARACTER*40 LABEL
      DIMENSION PRFMN (NV,*), PRFMX (NV,*), SOL (NV,2)
C  STEP = STEP ON THE X AND Y AXES
      STEP=100./NINT
      DO 10 K=1,NV
         SUMN=0.
         SUMX=0.
         DN=0.
         DX=0.
         DO 20 I=1,NINT
            SUMN=SUMN+PRFMN(K,I)*I
            DN=DN+PRFMN(K,I)
            SUMX=SUMX+PRFMX(K,I)*I
            DX=DX+PRFMX(K,I)
   20    CONTINUE
         SOL(K,1)=SUMN*STEP/DN
         SOL(K,2)=SUMX*STEP/DX
   10 CONTINUE
      WRITE(NWRITE,100)
      DO 30 K=1,NV
         WRITE(NWRITE,200) K,SOL(K,1),SOL(K,2),LABEL(K)
   30 CONTINUE
  100 FORMAT(//,15X,16HPLOT COORDINATES,//2X,11HITEM NUMBER,
     $9X,1HX,11X,1HY,/,2X,11(1H-),9X,1H-,11X,1H-)
  200 FORMAT(/9X,I2,6X,F6.2,6X,F6.2,4X,A)
      END
C
      SUBROUTINE PLSA1(SOL,IXY,N)
      IMPLICIT INTEGER*2  (I-N)
C  THIS SUB. PLOTS FOR SOLUTION SOL
C  LSA1 DIAGRAM
C  IXY IS A WORKING AREA
C  THE INPUT COORDINATES SOL(.,1) (FIRST AXIS)
C  AND SOL(.,J) (SECOND AXIS) HAVE TO LIE
C  BETWEEN 0. AND 100.
C
      INTEGER*2  IXY(N,2)
      INTEGER*2 IW(51), IBLANK
C
      CHARACTER*4 FOR(56)
      COMMON/SCHARS/UP,BOTTM,LEFT,RIGHT,
     $               UPLEFT,UPRIGHT,BOTTMLEFT,BOTTMRIGHT,FORMFEED
      CHARACTER*1 UP,BOTTM,LEFT,RIGHT,
     $             UPLEFT,UPRIGHT,BOTTMLEFT,BOTTMRIGHT,FORMFEED
      CHARACTER*4 F1,F56,F3,F55,SK1,BLANK,FALF,FINT
      CHARACTER*5 I100,I50,I0,IBL
C
      DIMENSION SOL(N,2)
      COMMON/IO/NWRITE,NSCR
      DATA F1,F56,F3,F55/4H(3X,,4H)   ,4HA1  ,4H,A1 /
      DATA SK1/ 4HA5, /
      DATA BLANK,IBLANK,FALF,FINT/4H    ,2H    ,4H,A2 ,4H,I2 /
      DATA I100,I50,I0,IBL/5H100.. ,5H 50..  ,5H  0.. ,5H        /
C     DATA UP,BOTTM,LEFT,RIGHT/'Í','Í','º','º'/
C     DATA UPLEFT,UPRIGHT,BOTTMLEFT,BOTTMRIGHT / 'É', '»', 'È', '¼' /
C
C  THIS PLOT IS AVAILABLE FOR 51
C  POSITIONS IN EACH AXIS SINCE THE
C  COORDINATES GO FROM 0./2 TO 100./2
C
C     FORMFEED = CHAR (12)
      NCOOR=50
      NPOS=NCOOR+1
      NFOR=3+NPOS+2
C
C  CLEAR FORMAT ARRAY
      DO 1 K=1,NFOR
         FOR(K)=BLANK
    1 CONTINUE
      FOR(1)=F1
      FOR(2)=SK1
      FOR(3)=F3
      FOR(NFOR-1)=F55
      FOR(NFOR)=F56
C
C  POINT COORDINATES ON FIRST AXIS
      DO 3 K=1,N
         IXY(K,1)=.5*SOL(K,1)+1.5
    3 CONTINUE
C
C  POINT COORDINATES ON SECOND AXIS
      DO 71 K=1,N
         LL=.5*SOL(K,2)+1.5
         IXY(K,2)=NPOS+1-LL
   71 CONTINUE
      WRITE(NWRITE,1000) FORMFEED
      WRITE(NWRITE,72)
   72 FORMAT(/)
      WRITE(NWRITE,1001) UPLEFT, (UP,JJ=1,102), UPRIGHT
      DO 18 KY=1,NPOS
         DO 7 K=1,NPOS
            IW(K)=IBLANK
            K3=K+3
            FOR(K3)=FALF
    7    CONTINUE
         DO 9 KJ=1,N
            IF(IXY(KJ,2).NE.KY) GO TO 9
            K=IXY(KJ,1)
            K3=K+3
            FOR(K3)=FINT
            IW(K)=KJ
    9    CONTINUE
C
        IF(KY.EQ.1) THEN
               WRITE(NWRITE,FOR) I100, LEFT, IW, RIGHT
        ELSE IF(KY.EQ.(NPOS+1)/2) THEN
               WRITE(NWRITE,FOR) I50, LEFT, IW, RIGHT
        ELSE IF(KY.EQ.NPOS) THEN
               WRITE(NWRITE,FOR) I0, LEFT, IW, RIGHT
        ELSE
               WRITE(NWRITE,FOR) IBL, LEFT, IW, RIGHT
        END IF
   18 CONTINUE
      WRITE(NWRITE,1001) BOTTMLEFT, (BOTTM,JJ=1,102), BOTTMRIGHT
      WRITE(NWRITE,1222)
      RETURN
C
C  THE FOLLOWING FORMATS ARE
C  AVAILABLE FOR 51 POSITIONS
 1001 FORMAT (8X,104A1)
 1222 FORMAT (2(10X,1H.,49X,1H.,49X,1H.,/),
     $10X,1H0,48X,2H50,48X,3H100//)
C
 1000 FORMAT(A1,51X,12HLSA1 DIAGRAM,/,37X,
     $44HITEM MAPPING BASED ON POSAC1 BOUNDARY SCALES)
C
      END
C
      SUBROUTINE SPLSA1(SOL,IXY,N)
      IMPLICIT INTEGER*2  (I-N)
C  THIS SUB. PLOTS ON THE SCREEN FOR SOLUTION SOL
C  LSA1 DIAGRAM, AND TO FILE LSA1.SCR
C  IXY IS A WORKING AREA
C  THE INPUT COORDINATES SOL(.,1) (FIRST AXIS)
C  AND SOL(.,J) (SECOND AXIS) HAVE TO LIE
C  BETWEEN 0. AND 100.
C
      INTEGER*2  IXY(N,2)
      INTEGER*2 IW(25), IBLANK, ITEMP
      LOGICAL   TMPOPEN
C
      CHARACTER*4 FOR(30)
      COMMON/LAB/LABEL (26)
      CHARACTER*40 LABEL
      COMMON/SCHARS/UP,BOTTM,LEFT,RIGHT,
     $               UPLEFT,UPRIGHT,BOTTMLEFT,BOTTMRIGHT,FORMFEED
      CHARACTER*1 UP,BOTTM,LEFT,RIGHT,
     $             UPLEFT,UPRIGHT,BOTTMLEFT,BOTTMRIGHT,FORMFEED
      CHARACTER*4 F1,F56,F57,F3,F55,FALF,FINT
      CHARACTER*5 I100,I50,I0,IBL
C
      DIMENSION SOL(N,2)
C      COMMON/IO/NWRITE,NSCR
      DATA F1,F56,F57,F3,F55/4H(1X, ,4HI3,1 ,4HX,A) ,4HA1   ,4H,A1, /
      DATA IBLANK,FALF,FINT/2H    ,4H,A2 ,4H,I2 /
      DATA I100,I50,I0,IBL/5H100.. ,5H 50..  ,5H  0.. ,5H        /
C     DATA UP,BOTTM,LEFT,RIGHT/'Í','Í','º','º'/
C     DATA UPLEFT,UPRIGHT,BOTTMLEFT,BOTTMRIGHT / 'É', '»', 'È', '¼' /
C
C  THIS PLOT IS AVAILABLE FOR 51
C  POSITIONS IN EACH AXIS SINCE THE
C  COORDINATES GO FROM 0./2 TO 100./2
C
C     FIRSTLY, OPEN THE SCREEN FILE
C
      ITEMP = 21
      OPEN (ITEMP, FILE='LSA1.SCR', ACCESS='SEQUENTIAL',
     $             FORM='FORMATTED', ERR=100)
      TMPOPEN = .TRUE.
      GOTO 101
 100  TMPOPEN = .FALSE.
      WRITE (*,*) ' ** Cannot open screen plot file **'
 101  CONTINUE
C
      NCOOR=24
      NROW=NCOOR-1
      NCOL=NCOOR+1
      NCOL2=NCOL+NCOL
      NFOR=2+3+NCOL
C
C  CLEAR FORMAT ARRAY
C      DO 1 K=1,NFOR
C         FOR(K)=BLANK
C    1 CONTINUE
      FOR(1)=F1
      FOR(2)=F3
      FOR(NFOR-2)=F55
      FOR(NFOR-1)=F56
      FOR(NFOR)=F57
C
C  POINT COORDINATES ON FIRST AXIS
      DO 3 K=1,N
         IXY(K,1)=.24*SOL(K,1)+1.5
    3 CONTINUE
C
C  POINT COORDINATES ON SECOND AXIS
      DO 71 K=1,N
         LL=.22*SOL(K,2)+1.5
         IXY(K,2)=NROW+1-LL
   71 CONTINUE
      WRITE (*,*) CHAR (7), CHAR (7)
      WRITE(*,1001) UPLEFT, (UP,JJ=1,NCOL2), UPRIGHT,
     $                                  '       LSA1 SOLUTION'
      IF (TMPOPEN) WRITE(ITEMP,1001) UPLEFT, (UP,JJ=1,NCOL2), UPRIGHT,
     $                                  '       LSA1 SOLUTION'
      DO 18 KY=1,NROW
         DO 7 K=1,NCOL
            IW(K)=IBLANK
            FOR(K+2)=FALF
    7    CONTINUE
         DO 9 KJ=1,N
            IF(IXY(KJ,2).NE.KY) GO TO 9
            K=IXY(KJ,1)
            FOR(K+2)=FINT
            IW(K)=KJ
    9    CONTINUE
C
        IF (KY .LE. N) THEN
          WRITE (*,FOR) LEFT , IW, RIGHT, KY, LABEL (KY) (1:23)
          IF (TMPOPEN) WRITE (ITEMP,FOR) LEFT , IW, RIGHT,
     $                                   KY, LABEL (KY) (1:23)
        ELSE
          WRITE (*,FOR) LEFT , IW, RIGHT
          IF (TMPOPEN) WRITE (ITEMP,FOR) LEFT , IW, RIGHT
        END IF
C
   18 CONTINUE
      WRITE(*,1001) BOTTMLEFT, (BOTTM,JJ=1,NCOL2), BOTTMRIGHT
      IF (TMPOPEN) WRITE(ITEMP,1001) BOTTMLEFT, (BOTTM,JJ=1,NCOL2),
     $                               BOTTMRIGHT
C      WRITE(NWRITE,1222)
C
      CLOSE (ITEMP)
      RETURN
C
C  THE FOLLOWING FORMATS ARE
C  AVAILABLE FOR 51 POSITIONS
 1001 FORMAT (1X,104A)
C 1222 FORMAT (2(10X,1H.,49X,1H.,49X,1H.,/),
C     $10X,1H0,48X,2H50,48X,3H100//)
C
C 1000 FORMAT(A1,51X,12HLSA1 DIAGRAM,/,37X,
C     $44HITEM MAPPING BASED ON POSAC1 BOUNDARY SCALES)
C
      END
C
      SUBROUTINE COSIST(SOL,ROW,NV,NINT)
      IMPLICIT INTEGER*2  (I-N)
C   ADDED , OCTOBER 1982 *****
C  THIS SUB. COMPUTES COEFFICIENTS OF STRUCTURAL SIMILARITY
C
      COMMON/IO/NWRITE,NSCR
      COMMON/SCHARS/UP,BOTTM,LEFT,RIGHT,
     $               UPLEFT,UPRIGHT,BOTTMLEFT,BOTTMRIGHT,FORMFEED
      CHARACTER*1 UP,BOTTM,LEFT,RIGHT,
     $             UPLEFT,UPRIGHT,BOTTMLEFT,BOTTMRIGHT,FORMFEED
      DIMENSION SOL(NV,2),ROW(NV)
      CHARACTER TR*5,LINE*120,HYPHEN*5
      LOGICAL NV24
C THERE IS TWO KINDS OF PRINTOUT ACCORDING TO
C THE MAXIMAL NUMBER OF VARIABLES : 24
      NV24=.TRUE.
      IF (NV.GT.24) NV24=.FALSE.
C     WRITE(NWRITE,'(1H1)')
      WRITE(NWRITE,400) FORMFEED
      WRITE(NWRITE,100) (J,J=1,NV)
      TR=UP//UP//UP//UP//UP
      HYPHEN='    -'
      WRITE(NWRITE,300) UPLEFT, (TR,J=1,NV)
      DO 10 I=1,NV
         XI=SOL(I,1)*NINT/100.
         YI=SOL(I,2)*NINT/100.
         DO 20 J=1,I
            XJ=SOL(J,1)*NINT/100.
            YJ=SOL(J,2)*NINT/100.
            DIJ=ABS(XI-XJ)+ABS(YI-YJ)
            ROW(J)=1.-(DIJ-2.)/(NINT-2.)
   20    CONTINUE
         WRITE(NWRITE,500) LEFT
         IF (NV24) THEN
C  CLEAR LINE
         DO 25 K=1,120
            LINE(K:K)=' '
   25    CONTINUE
         WRITE(LINE,'(24F5.2)') (ROW(J),J=1,I)
         I1=5*I-4
         I2=I1+4
         LINE(I1:I2)=HYPHEN
         WRITE(NWRITE,250) I,LEFT,LINE
         ELSE
         WRITE(NWRITE,200) I,LEFT,(ROW(J),J=1,I)
         ENDIF
   10 CONTINUE
      WRITE(NWRITE,600)
      RETURN
  100 FORMAT(7X,(T8,24I5))
  200 FORMAT(2X,I3,1X,A1,(T8,24F5.2))
  250 FORMAT(2X,I3,1X,A1,T8,A)
  300 FORMAT(6X,A1,(T8,24A))
  400 FORMAT(A1,10X,'COEFFICIENTS OF STRUCTURAL SIMILARITY : E*',/,
     $       10X,42(1H-),//)
  500 FORMAT(6X,A1)
  600 FORMAT(///,2X,'NOTE : ',T10,'FOR TWO-DIMENSIONAL PARTIAL ORDER',
     $ /,T10,'SCALOGRAMS THE COEFFICIENT OF STRUCTURAL',
     $ /,T10,'SIMILARITY , E* , IS BETWEEN -1 AND 1 .',
     $ /,T10,'TO THE EXTENT THE SCALOGRAM DIMENSIONALITY',
     $ /,T10,'DEVIATES FROM TWO , E* MAY DEVIATE',
     $ /,T10,'TO VALUES LARGER THAN ONE .')
      END
C
      SUBROUTINE OPENFILE
      IMPLICIT INTEGER*2  (I-N)
      COMMON/IO/NWRITE,NSCR
C
      CHARACTER*128 PARS
CY      INTEGER*2 I, STATUS
      INTEGER*2 I
CY      INTEGER*4 NARGS
      INTEGER*4 IARGC
C
      NWRITE=8
      NSCR=9
CY      I = NARGS () - 1
      I = IARGC()
      IF (I .LT. 1) GOTO 800
C
      I = 1
CY      CALL GETARG (I, PARS, STATUS)
      CALL GETARG (I, PARS)
CY      IF (STATUS .LE. 0)  GOTO 810
      IF (PARS(1:1).EQ.' ')  GOTO 810
C
      OPEN (NWRITE,FILE=PARS,ACCESS='SEQUENTIAL',
     $              FORM='FORMATTED',ERR=820 )
C
      OPEN (NSCR,FILE='FORT9',STATUS='OLD',ACCESS='SEQUENTIAL',
     $              FORM='UNFORMATTED' )
      REWIND NSCR
C
      RETURN
C
 800  WRITE (*,900) CHAR(7)
      GOTO 850
C
 810  WRITE (*,920) CHAR(7)
      GOTO 850
C
CY 820  WRITE (*,910) PARS (1:STATUS), CHAR(7)
 820  WRITE (*,910) PARS, CHAR(7)
      GOTO 850
C
 850  STOP 2
C
 900  FORMAT (' *** ERROR ***  No parameter supplied.', A1)
 910  FORMAT (' *** ERROR *** opening file ', A, A1)
 920  FORMAT (' *** ERROR *** Parameter status error in  GETARG.', A1)
C
      END

